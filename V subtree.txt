#include<bits/stdc++.h>
using namespace std;
 
#define ll long long
ll m; 
vector<ll>v[100001];
ll dp1[100001],dp2[100001];
 
void dfs1(ll src , ll par)
{
	dp1[src]=1;
    for(auto child :v[src])
    {
        if(child!= par)
        {
            dfs1(child,src);
            dp1[src]=(dp1[src]*(1+dp1[child]))%m;
        }
        
    } 
}
 
void dfs2(ll src,bool vis[],ll n, ll pways)
{
    vis[src]=1;
 
    dp2[src]= (dp1[src]*(1+pways))%m;
 
    vector<ll>prefix,suffix;
 
    for(auto child : v[src])
    { 
        if(!vis[child])
        {
            prefix.push_back(1+dp1[child]);
            suffix.push_back(1+dp1[child]);
        }
    }
 
    for(ll i = suffix.size()-2;i>=0;i--)
    {
        suffix[i]=(suffix[i]*suffix[i+1])%m;
    }
     for(ll i = 1;i<prefix.size();i++)
    {
        prefix[i]=(prefix[i]*prefix[i-1])%m;
    }
    ll cnt=0;
 
    for(auto child : v[src])
    {
        if(!vis[child])
        {
            ll ans =1+pways;
 
             ans = (cnt>0)? (ans*prefix[cnt-1])%m:ans;
            ans = (cnt<suffix.size()-1)?(ans*suffix[cnt+1])%m:ans;
 
            dfs2(child,vis,n,ans);
            cnt++;
        }
    }
}
 
 
int main()
{
    ll n; cin>>n>>m;
 
    for(ll i=1;i<n;i++)
    {
        ll a,b; cin>>a>>b;
        v[a].push_back(b);
        v[b].push_back(a);
    }
    bool vis[n+1];
    memset(vis,0,sizeof(vis));
 
    dfs1(1,-1);
    dfs2(1,vis,n,0);
 
    for(ll i=1;i<=n;i++)
    {
        cout<<dp2[i]<<endl;
    }
    
}